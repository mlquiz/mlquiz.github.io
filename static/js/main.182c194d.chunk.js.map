{"version":3,"sources":["components/Quiz/utils.ts","components/Quiz/api.ts","components/Quiz/images/styled.ts","components/Quiz/images/cross.tsx","components/Quiz/images/tick.tsx","components/SignupForm/styled.ts","components/SignupForm/index.js","components/Quiz/Result/styled.ts","components/Quiz/Result/index.tsx","components/Quiz/styled.ts","components/Quiz/index.tsx","components/HomePage/styled.ts","components/HomePage/index.tsx","components/QuizPage/index.tsx","components/Routes/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["randomizeQuestions","questions","map","question","answers","sort","Math","random","sleep","t","Promise","s","setTimeout","pageQuestions","id","answer","img","isCorrect","getQuestions","isPage","a","StyledSVG","styled","svg","isReview","Cross","version","xmlns","viewBox","className","fill","stroke","stroke-width","stroke-miterlimit","cx","cy","r","stroke-linecap","x1","y1","x2","y2","Tick","points","GetStartedButton","Button","SignUpFormCont","div","PasswordCol","Col","isHidden","SignUpForm","useState","hidePasswordField","sethidePasswordField","onEmailPress","method","Form","Group","Row","md","Control","type","required","placeholder","name","size","onKeyPress","onChange","to","round","variant","ResultsCont","ResultItem","ReviewButton","Result","resetQuiz","totalCorrect","onReview","SignupForm","onClick","AnswerCol","OptionCont","forceHighlight","OptionImage","props","isTransparent","QuestionImage","QuestionText","StyledProgressBar","ProgressBar","QuestionRow","NextButton","Quiz","showSignupForm","setQuestions","questionIndex","setQuestionIndex","answeredQuestions","setAnsweredQuestions","ticked","setTicked","crossed","setCrossed","setIsReview","answeredQuestion","useEffect","then","result","filter","content","nextQuestion","answerId","correctAnswer","find","answered","questionId","correctAnswerId","length","progress","Fragment","now","label","src","isTicked","isCrossed","lg","Spinner","animation","Container","undefined","HeadingContainer","Header","h1","SubHeading","FormContainer","QuizContainer","HomePage","sm","QuizPage","match","params","Routes","exact","path","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.182c194d.chunk.js","sourcesContent":["import { Question } from \"./api\";\n\nexport const randomizeQuestions = (questions: Question[]): Question[] =>\n    questions\n        .map((question) => ({\n            ...question,\n            answers: question.answers.sort(() => Math.random() - 0.5),\n        }))\n        .sort(() => Math.random() - 0.5);\n","import { randomizeQuestions } from \"./utils\";\n\nconst sleep = (t: number) => new Promise((s) => setTimeout(s, t));\n\nexport interface Answer {\n    id: number;\n    answer: string;\n    img: string;\n    isCorrect: boolean;\n}\n\nexport interface Question {\n    id: number;\n    question: string;\n    answers: Answer[];\n    img?: string;\n}\n\nconst pageQuestions = [\n    {\n        id: 1,\n        question:\n            \"Which of the following correctly represents the different learning rate ?\",\n        answers: [\n            {\n                id: 1,\n                answer: \"\",\n                img: \"/static/img/quiz_images/1/lr1.png\",\n                isCorrect: false,\n            },\n            {\n                id: 2,\n                answer: \"\",\n                img: \"/static/img/quiz_images/1/lr2.png\",\n                isCorrect: false,\n            },\n            {\n                id: 3,\n                answer: \"\",\n                img: \"/static/img/quiz_images/1/lr3.png\",\n                isCorrect: false,\n            },\n            {\n                id: 4,\n                answer: \"\",\n                img: \"/static/img/quiz_images/1/true.png\",\n                isCorrect: true,\n            },\n        ],\n    },\n    {\n        id: 2,\n        question: \"Which of the following model is overfitted to data ?\",\n        answers: [\n            {\n                id: 1,\n                answer: \"\",\n                img: \"/static/img/quiz_images/2/true.png\",\n                isCorrect: true,\n            },\n            {\n                id: 2,\n                answer: \"\",\n                img: \"/static/img/quiz_images/2/false.png\",\n                isCorrect: false,\n            },\n        ],\n    },\n    {\n        id: 3,\n        question: \"Which of the following model is underfitted to data ?\",\n        answers: [\n            {\n                id: 1,\n                answer: \"\",\n                img: \"/static/img/quiz_images/3/true.png\",\n                isCorrect: true,\n            },\n            {\n                id: 2,\n                answer: \"\",\n                img: \"/static/img/quiz_images/3/false.png\",\n                isCorrect: false,\n            },\n        ],\n    },\n    {\n        id: 4,\n        question:\n            \"What is the accuracy of the model for prediction shown in the figure.?\",\n        img: \"/static/img/quiz_images/4/q.png\",\n        answers: [\n            {\n                id: 1,\n                answer: \"66.66 %\",\n                img: \"\",\n                isCorrect: true,\n            },\n            {\n                id: 2,\n                answer: \"50 %\",\n                img: \"\",\n                isCorrect: false,\n            },\n            {\n                id: 3,\n                answer: \"90 %\",\n                img: \"\",\n                isCorrect: false,\n            },\n        ],\n    },\n    {\n        id: 5,\n        question:\n            \"Given two models as in the figure, the prediction is denoted by black line and red arrow denotes the loss. Which model has lower loss ?\",\n        answers: [\n            {\n                id: 1,\n                answer: \"\",\n                img: \"/static/img/quiz_images/5/true.png\",\n                isCorrect: true,\n            },\n            {\n                id: 2,\n                answer: \"\",\n                img: \"/static/img/quiz_images/5/false.png\",\n                isCorrect: false,\n            },\n        ],\n    },\n    {\n        id: 6,\n        question: \"Which of the function is convex ?\",\n        answers: [\n            {\n                id: 1,\n                answer: \"\",\n                img: \"/static/img/quiz_images/6/true.png\",\n                isCorrect: true,\n            },\n            {\n                id: 2,\n                answer: \"\",\n                img: \"/static/img/quiz_images/6/false.png\",\n                isCorrect: false,\n            },\n        ],\n    },\n    {\n        id: 7,\n        question:\n            \"Given the dataset as shown in the image, which of the following classifiers will achieve zero training error ?\",\n        img: \"/static/img/quiz_images/7/q.png\",\n        answers: [\n            {\n                id: 1,\n                answer: \"Logistic Regression\",\n                img: \"\",\n                isCorrect: false,\n            },\n            {\n                id: 2,\n                answer: \"SVM(Linear kernel)\",\n                img: \"\",\n                isCorrect: false,\n            },\n            {\n                id: 3,\n                answer: \"SVM(Quadratic Kernel)\",\n                img: \"\",\n                isCorrect: true,\n            },\n        ],\n    },\n    {\n        id: 8,\n        question:\n            \" Given the dataset as shown in the image, which of the following represents correct decision boundary for an soft margin SVM with Quadratic kernel and for large value of C (i.e C -> infinity.  )\",\n        img: \"/static/img/quiz_images/8/q.png\",\n        answers: [\n            {\n                id: 1,\n                answer: \"\",\n                img: \"/static/img/quiz_images/8/1.png\",\n                isCorrect: false,\n            },\n            {\n                id: 2,\n                answer: \"\",\n                img: \"/static/img/quiz_images/8/2.png\",\n                isCorrect: false,\n            },\n            {\n                id: 3,\n                answer: \"\",\n                img: \"/static/img/quiz_images/8/true.png\",\n                isCorrect: true,\n            },\n        ],\n    },\n    {\n        id: 9,\n        question:\n            \"Given the dataset as shown in the image, which of the following represents the output of k-means clustering. \",\n        img: \"/static/img/quiz_images/9/q.png\",\n        answers: [\n            {\n                id: 1,\n                answer: \"\",\n                img: \"/static/img/quiz_images/9/false.png\",\n                isCorrect: false,\n            },\n            {\n                id: 2,\n                answer: \"\",\n                img: \"/static/img/quiz_images/9/true.png\",\n                isCorrect: true,\n            },\n        ],\n    },\n    {\n        id: 10,\n        question:\n            \"Given two functions (function1 and function2) as shown in the figures. Gradient descent (GD) starts from the red mark in the figures and goes 'downhill' until it terminates. For which of functions, the minima found by GD will be global minima ?\",\n        answers: [\n            {\n                id: 1,\n                answer: \"\",\n                img: \"/static/img/quiz_images/10/false.png\",\n                isCorrect: false,\n            },\n            {\n                id: 2,\n                answer: \"\",\n                img: \"/static/img/quiz_images/10/true.png\",\n                isCorrect: true,\n            },\n        ],\n    },\n];\n\nexport const getQuestions = async (isPage: boolean): Promise<Question[]> => {\n    // TODO: Fetch questions from real api\n    // mocking api with sleep\n    await sleep(2000);\n    let questions;\n    if (isPage) {\n        questions = pageQuestions;\n    } else {\n        questions = [\n            {\n                id: 1,\n                question:\n                    \"Which of the following is more likely to be the result of DBScan (density-based) clustering algorithm?\",\n                answers: [\n                    {\n                        id: 1,\n                        answer: \"\",\n                        img: \"/static/img/quiz_images/dbscan.png\",\n                        isCorrect: true,\n                    },\n                    {\n                        id: 2,\n                        answer: \"\",\n                        img: \"/static/img/quiz_images/k_means.png\",\n                        isCorrect: false,\n                    },\n                ],\n            },\n            {\n                id: 2,\n                question: \"Which of the following dataset is linear?\",\n                answers: [\n                    {\n                        id: 1,\n                        answer: \"\",\n                        img: \"/static/img/quiz_images/linear_data.png\",\n                        isCorrect: true,\n                    },\n                    {\n                        id: 2,\n                        answer: \"\",\n                        img: \"/static/img/quiz_images/non_linear_data.png\",\n                        isCorrect: false,\n                    },\n                ],\n            },\n            {\n                id: 3,\n                question:\n                    \"Which of the figure demonstrate the model with 'High Bias'.?\",\n                answers: [\n                    {\n                        id: 1,\n                        answer: \"\",\n                        img: \"/static/img/quiz_images/high_bias.png\",\n                        isCorrect: true,\n                    },\n                    {\n                        id: 2,\n                        answer: \"\",\n                        img: \"/static/img/quiz_images/low_bias.png\",\n                        isCorrect: false,\n                    },\n                ],\n            },\n        ];\n    }\n    return randomizeQuestions(questions);\n};\n","import styled from \"styled-components\";\n\nconst getSVGStyles = ({ isReview = true }: { isReview?: boolean }) => {\n    if (!isReview) {\n        return `\n            max-width: 150px;\n            top: 20%;\n            left: 34%;\n        `;\n    } else {\n        return `\n            max-width: 40px;\n            top: 70%;\n            left: 70%;\n        `;\n    }\n};\n\nexport const StyledSVG = styled.svg`\n    position: absolute;\n    ${getSVGStyles}\n    .path {\n        stroke-dasharray: 1000;\n        stroke-dashoffset: 0;\n    }\n\n    .path.circle {\n        -webkit-animation: dash 0.9s ease-in-out;\n        animation: dash 0.9s ease-in-out;\n    }\n\n    .path.line {\n        stroke-dashoffset: 1000;\n        -webkit-animation: dash 0.9s 0.35s ease-in-out forwards;\n        animation: dash 0.9s 0.35s ease-in-out forwards;\n    }\n\n    .path.check {\n        stroke-dashoffset: -100;\n        -webkit-animation: dash-check 0.9s 0.35s ease-in-out forwards;\n        animation: dash-check 0.9s 0.35s ease-in-out forwards;\n    }\n\n    @-webkit-keyframes dash {\n        0% {\n            stroke-dashoffset: 1000;\n        }\n        100% {\n            stroke-dashoffset: 0;\n        }\n    }\n\n    @keyframes dash {\n        0% {\n            stroke-dashoffset: 1000;\n        }\n        100% {\n            stroke-dashoffset: 0;\n        }\n    }\n\n    @-webkit-keyframes dash-check {\n        0% {\n            stroke-dashoffset: -100;\n        }\n        100% {\n            stroke-dashoffset: 900;\n        }\n    }\n\n    @keyframes dash-check {\n        0% {\n            stroke-dashoffset: -100;\n        }\n        100% {\n            stroke-dashoffset: 900;\n        }\n    }\n`;\n","import { StyledSVG } from \"./styled\";\n\nconst Cross = ({ isReview }: { isReview: boolean }) => (\n    <StyledSVG\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 130.2 130.2\"\n        isReview={isReview}\n    >\n        <circle\n            className=\"path circle\"\n            fill=\"none\"\n            stroke=\"#D06079\"\n            stroke-width=\"6\"\n            stroke-miterlimit=\"10\"\n            cx=\"65.1\"\n            cy=\"65.1\"\n            r=\"62.1\"\n        />\n        <line\n            className=\"path line\"\n            fill=\"none\"\n            stroke=\"#D06079\"\n            stroke-width=\"6\"\n            stroke-linecap=\"round\"\n            stroke-miterlimit=\"10\"\n            x1=\"34.4\"\n            y1=\"37.9\"\n            x2=\"95.8\"\n            y2=\"92.3\"\n        />\n        <line\n            className=\"path line\"\n            fill=\"none\"\n            stroke=\"#D06079\"\n            stroke-width=\"6\"\n            stroke-linecap=\"round\"\n            stroke-miterlimit=\"10\"\n            x1=\"95.8\"\n            y1=\"38\"\n            x2=\"34.4\"\n            y2=\"92.2\"\n        />\n    </StyledSVG>\n);\n\nexport default Cross;\n","import { StyledSVG } from \"./styled\";\n\nconst Tick = ({ isReview }: { isReview: boolean }) => (\n    <StyledSVG\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 130.2 130.2\"\n        isReview={isReview}\n    >\n        <circle\n            className=\"path circle\"\n            fill=\"none\"\n            stroke=\"#73AF55\"\n            stroke-width=\"6\"\n            stroke-miterlimit=\"10\"\n            cx=\"65.1\"\n            cy=\"65.1\"\n            r=\"62.1\"\n        />\n        <polyline\n            className=\"path check\"\n            fill=\"none\"\n            stroke=\"#73AF55\"\n            stroke-width=\"6\"\n            stroke-linecap=\"round\"\n            stroke-miterlimit=\"10\"\n            points=\"100.2,40.2 51.5,88.8 29.8,67.5 \"\n        />\n    </StyledSVG>\n);\n\nexport default Tick;\n","import Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/esm/Col\";\nimport styled from \"styled-components\";\n\nexport const GetStartedButton = styled(Button)`\n    min-width: 300px\n    text-align: center;\n`;\n\nexport const SignUpFormCont = styled.div`\n    text-align: left;\n`;\n\nconst getPasswordColStyles = ({ isHidden }: { isHidden: boolean }) => `\n    max-width: ${isHidden ? \"0\" : \"100%\"};\n    padding: ${isHidden ? \"0\" : \"0 15px 0 15px\"};\n    input {\n        display: ${isHidden ? \"none\" : \"inline\"};\n    }\n`;\n\nexport const PasswordCol = styled(Col)`\n    transition: all 1.5s ease;\n    ${getPasswordColStyles}\n`;\n","import Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport { useState } from \"react\";\n\nimport { GetStartedButton, SignUpFormCont, PasswordCol } from \"./styled\";\nimport { Link } from \"react-router-dom\";\n\nconst SignUpForm = () => {\n    const [hidePasswordField, sethidePasswordField] = useState(true);\n    const onEmailPress = () => hidePasswordField && sethidePasswordField(false);\n\n    return (\n        <SignUpFormCont>\n            <form method=\"get\">\n                <Form.Group>\n                    <Row>\n                        <Col md={hidePasswordField ? 3 : 2} />\n                        <Col md={3}>\n                            <Form.Control\n                                type=\"email\"\n                                required=\"required\"\n                                placeholder=\"Email\"\n                                name=\"email\"\n                                size=\"md\"\n                                onKeyPress={onEmailPress}\n                                onChange={onEmailPress}\n                            />\n                        </Col>\n\n                        <PasswordCol md={3} isHidden={hidePasswordField}>\n                            <Form.Control\n                                type=\"password\"\n                                required=\"required\"\n                                placeholder=\"Password\"\n                                size=\"md\"\n                                name=\"password\"\n                            />\n                        </PasswordCol>\n                        <Col md={3}>\n                            <Link\n                                to={`/quiz/${Math.round(Math.random() * 1000)}`}\n                            >\n                                <GetStartedButton variant=\"primary\" size=\"md\">\n                                    Signup with Email!\n                                </GetStartedButton>\n                            </Link>\n                        </Col>\n                    </Row>\n                </Form.Group>\n            </form>\n        </SignUpFormCont>\n    );\n};\n\nexport default SignUpForm;\n","import Button from \"react-bootstrap/Button\";\nimport styled from \"styled-components\";\n\nconst getResultsStyles = ({ isPage }: { isPage: boolean }) => `\n    font-size: ${isPage ? \"25px\" : \"12px\"};\n`;\n\nexport const ResultsCont = styled.div`\n    text-align: center;\n    padding-top: 30px;\n    ${getResultsStyles};\n`;\n\nexport const ResultItem = styled.div`\n    padding: 20px;\n`;\n\nexport const ReviewButton = styled(Button)`\n    font-size: 25px;\n`;\n","import SignupForm from \"components/SignupForm\";\nimport Button from \"react-bootstrap/Button\";\nimport { ResultItem, ResultsCont, ReviewButton } from \"./styled\";\n\nconst Result = ({\n    isPage,\n    resetQuiz,\n    totalCorrect,\n    onReview,\n}: {\n    isPage: boolean;\n    resetQuiz: () => void;\n    totalCorrect: Number;\n    onReview: () => void;\n}) => (\n    <ResultsCont isPage={isPage}>\n        <ResultItem>Total correct: {totalCorrect}</ResultItem>\n        {!isPage && (\n            <ResultItem>\n                <SignupForm />\n            </ResultItem>\n        )}\n        {isPage && (\n            <ResultItem>\n                <ReviewButton variant=\"link\" onClick={onReview}>\n                    Review all questions\n                </ReviewButton>\n            </ResultItem>\n        )}\n        <ResultItem>\n            <Button onClick={resetQuiz} variant=\"link\">\n                Try again\n            </Button>\n        </ResultItem>\n    </ResultsCont>\n);\n\nexport default Result;\n","import Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Row from \"react-bootstrap/Row\";\nimport styled from \"styled-components\";\n\nexport const AnswerCol = styled(Col)`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst getOptionContStyles = ({\n    forceHighlight,\n    isReview,\n}: {\n    forceHighlight?: boolean;\n    isReview: boolean;\n}) => {\n    if (!isReview) {\n        return `\n            :hover {\n                background-color: #ffff66;\n                opacity: 0.5;\n            }\n            cursor: pointer;\n        `;\n    } else {\n        return `\n            ${forceHighlight && \"background-color: #ffffef;\"}\n        `;\n    }\n};\n\nexport const OptionCont = styled.div`\n    ${getOptionContStyles}\n    min-height: 200px;\n    display: flex;\n    width: 300px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const OptionImage = styled.img`\n    height: 250px;\n    max-width: 290px;\n    padding: 10px;\n    margin-bottom: 10px;\n    opacity: ${(props: { isTransparent: boolean }) =>\n        props.isTransparent ? \"0.2\" : \"1\"};\n`;\n\nexport const QuestionImage = styled.img`\n    max-height: 250px;\n    padding: 10px;\n    margin: 0 auto;\n`;\n\nexport const QuestionText = styled.div`\n    padding: 10px 10px 40px 10px;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    font-weight: 500;\n    color: #666;\n    width: 100%;\n`;\n\nexport const StyledProgressBar = styled(ProgressBar)`\n    width: 100%;\n    height: 30px;\n`;\n\nexport const QuestionRow = styled(Row)`\n    text-align: center;\n`;\n\nexport const NextButton = styled(Button)`\n    margin: 0 auto;\n    min-width: 150px;\n    border-radius: 0;\n`;\n","import React, { useEffect, useState } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { getQuestions, Question } from \"./api\";\nimport Cross from \"./images/cross\";\nimport Tick from \"./images/tick\";\nimport Result from \"./Result\";\nimport {\n    AnswerCol,\n    NextButton,\n    OptionCont,\n    OptionImage,\n    QuestionImage,\n    QuestionRow,\n    QuestionText,\n    StyledProgressBar,\n} from \"./styled\";\nimport { randomizeQuestions } from \"./utils\";\n\ninterface Answered {\n    questionId: number;\n    answerId: number;\n    isCorrect: boolean;\n    correctAnswerId: number | null;\n}\n\nconst Quiz = ({\n    showSignupForm = false,\n    isPage,\n}: {\n    showSignupForm?: boolean;\n    isPage: boolean;\n}) => {\n    const [questions, setQuestions] = useState<Question[]>([]);\n    const [questionIndex, setQuestionIndex] = useState<number>(0);\n    const [answeredQuestions, setAnsweredQuestions] = useState<Answered[]>([]);\n    const [ticked, setTicked] = useState<number | null>(null);\n    const [crossed, setCrossed] = useState<number | null>(null);\n    const [isReview, setIsReview] = useState<boolean>(false);\n\n    const question = questions[questionIndex];\n    const answeredQuestion = answeredQuestions[questionIndex];\n\n    useEffect(() => {\n        getQuestions(isPage).then((result) =>\n            setQuestions(result.filter((question) => question.id <= 3))\n        );\n    }, [isPage]);\n\n    const nextQuestion = (answerId?: number) => {\n        if (!question || ticked !== null || crossed !== null) return;\n        if (isReview || !answerId) {\n            return setQuestionIndex(questionIndex + 1);\n        }\n        const correctAnswer = question.answers.find(\n            (answer) => answer.isCorrect\n        );\n        const isCorrect = correctAnswer ? correctAnswer.id === answerId : false;\n\n        const answered = {\n            questionId: question.id,\n            answerId,\n            isCorrect,\n            correctAnswerId: correctAnswer ? correctAnswer.id : null,\n        };\n        setAnsweredQuestions([\n            answered,\n            ...answeredQuestions.filter(\n                (answer) => answer.questionId !== question.id\n            ),\n        ]);\n        setTimeout(() => {\n            setQuestionIndex(questionIndex + 1);\n            setTicked(null);\n            setCrossed(null);\n        }, 2000);\n        isCorrect ? setTicked(answerId) : setCrossed(answerId);\n    };\n\n    const resetQuiz = () => {\n        setQuestions(randomizeQuestions(questions));\n        setQuestionIndex(0);\n        setAnsweredQuestions([]);\n        setIsReview(false);\n    };\n\n    const onReview = () => {\n        setIsReview(true);\n        setQuestionIndex(0);\n    };\n\n    let content;\n\n    if (questions.length > 0 && questionIndex === questions.length) {\n        content = (\n            <Result\n                isPage={isPage}\n                resetQuiz={resetQuiz}\n                onReview={onReview}\n                totalCorrect={\n                    answeredQuestions.filter((answered) => answered.isCorrect)\n                        .length\n                }\n            />\n        );\n    } else if (!question) {\n        content = (\n            <QuestionRow>\n                <Spinner animation=\"border\" />\n            </QuestionRow>\n        );\n    } else {\n        const progress =\n            questions.length > 0\n                ? ((questionIndex + 1) / questions.length) * 100\n                : 0;\n        content = (\n            <React.Fragment>\n                <QuestionRow>\n                    <StyledProgressBar\n                        now={progress}\n                        label={`${questionIndex + 1} / ${questions.length}`}\n                    />\n                </QuestionRow>\n                <QuestionRow>\n                    <QuestionText>{question.question}</QuestionText>\n                    {question.img && <QuestionImage src={question.img} />}\n                </QuestionRow>\n                {isReview && (\n                    <QuestionRow>\n                        <NextButton\n                            onClick={() => nextQuestion()}\n                            variant=\"secondary\"\n                            size=\"sm\"\n                        >\n                            Next\n                        </NextButton>\n                    </QuestionRow>\n                )}\n                <QuestionRow>\n                    {question.answers.map((answer) => {\n                        const isTicked = !isReview\n                            ? answer.id === ticked\n                            : answeredQuestion &&\n                              answer.id === answeredQuestion.correctAnswerId;\n                        const isCrossed = !isReview\n                            ? answer.id === crossed\n                            : answeredQuestion &&\n                              answer.id === answeredQuestion.answerId &&\n                              answer.id !== answeredQuestion.correctAnswerId;\n                        return (\n                            <AnswerCol\n                                lg=\"6\"\n                                key={`${question.id}-${answer.id}`}\n                            >\n                                <OptionCont\n                                    onClick={() => nextQuestion(answer.id)}\n                                    forceHighlight={\n                                        answeredQuestion &&\n                                        answeredQuestion.answerId === answer.id\n                                    }\n                                    isReview={isReview}\n                                >\n                                    {answer.img && (\n                                        <OptionImage\n                                            isTransparent={\n                                                !isReview &&\n                                                (isTicked || isCrossed)\n                                            }\n                                            src={answer.img}\n                                        />\n                                    )}\n                                    {answer.answer && (\n                                        <div> {answer.answer} </div>\n                                    )}\n\n                                    {isTicked && <Tick isReview={isReview} />}\n                                    {isCrossed && <Cross isReview={isReview} />}\n                                </OptionCont>\n                            </AnswerCol>\n                        );\n                    })}\n                </QuestionRow>\n            </React.Fragment>\n        );\n    }\n    return (\n        <Container onClick={() => (isReview ? nextQuestion() : undefined)}>\n            {content}\n        </Container>\n    );\n};\n\nexport default Quiz;\n","import styled from \"styled-components\";\n\nexport const HeadingContainer = styled.div`\n    width: 100%;\n    padding: 80px 10px 60px 10px;\n    text-align: center;\n`;\n\nexport const Header = styled.h1`\n    font-size: calc(16px + 4vmin);\n    font-weight: 600;\n    color: #444;\n    padding-bottom: 10px;\n`;\n\nexport const SubHeading = styled.div`\n    font-size: calc(10px + 2vmin);\n    font-weight: 500;\n    color: #999;\n`;\n\nexport const FormContainer = styled.div`\n    padding: 50px 10px 10px 10px;\n`;\n\nexport const QuizContainer = styled.div`\n    background: rgb(255, 255, 255);\n    border: 1px solid rgb(213, 220, 230);\n    border-radius: 6px;\n    box-shadow: rgb(34 50 65 / 10%) 0px 6px 20px 0px;\n    text-align: center;\n    align-items: center;\n    min-height: 300px;\n    padding: 40px;\n    padding-bottom: 80px;\n`;\n","import Quiz from \"components/Quiz\";\nimport SignUpForm from \"components/SignupForm\";\nimport React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport {\n    FormContainer,\n    Header,\n    HeadingContainer,\n    QuizContainer,\n    SubHeading,\n} from \"./styled\";\n\nconst HomePage = () => (\n    <Container>\n        <Row>\n            <HeadingContainer>\n                <Header>Be confident in Machine Learning.</Header>\n                <SubHeading>\n                    Understand the key concepts of Machine Learning with 100's\n                    of quizzes.\n                </SubHeading>\n                <FormContainer>\n                    <SignUpForm />\n                </FormContainer>\n            </HeadingContainer>\n        </Row>\n        <Row>\n            <Col sm={12}>\n                <QuizContainer>\n                    <Quiz showSignupForm={true} isPage={false} />\n                </QuizContainer>\n            </Col>\n        </Row>\n    </Container>\n);\n\nexport default HomePage;\n","import Quiz from \"components/Quiz\";\nimport React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\ntype QuizMatchParams = { id: string };\n\nconst QuizPage = ({ match }: RouteComponentProps<QuizMatchParams>) => {\n    const quizId = match.params.id;\n    return <Quiz isPage={true} />;\n};\n\nexport default QuizPage;\n","import HomePage from \"components/HomePage\";\nimport QuizPage from \"components/QuizPage\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst Routes = () => (\n    <Router>\n        <Switch>\n            <Route exact path=\"/\" component={HomePage} />\n            <Route exact path=\"/quiz/:id\" component={QuizPage} />\n        </Switch>\n    </Router>\n);\n\nexport default Routes;\n","import Routes from \"components/Routes\";\nimport React from \"react\";\n\nconst App = () => <Routes />;\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import \"custom.scss\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}