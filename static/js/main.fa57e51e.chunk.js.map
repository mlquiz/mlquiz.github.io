{"version":3,"sources":["components/homepage/styled.ts","components/signupform/styled.ts","components/signupform/index.js","components/quiz/styled.ts","components/quiz/utils.ts","components/quiz/api.ts","components/common/spinner/index.ts","components/quiz/images/styled.ts","components/quiz/images/tick.tsx","components/quiz/images/cross.tsx","components/quiz/index.tsx","components/homepage/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HeadingContainer","styled","div","Header","h1","SubHeading","FormContainer","GetStartedButton","Button","SignUpFormCont","PasswordCol","Col","isHidden","SignUpForm","useState","hidePasswordField","sethidePasswordField","method","Form","Group","Row","md","Control","type","required","placeholder","size","onKeyPress","variant","QuizContainer","Container","OptionImage","img","props","isTransparent","QuestionText","Results","ResultItem","randomizeQuestions","questions","map","question","answers","sort","Math","random","sleep","t","Promise","s","setTimeout","getQuestions","a","id","answer","isCorrect","rotate360","keyframes","Spinner","StyledSVG","svg","Tick","version","xmlns","viewBox","className","fill","stroke","stroke-width","stroke-miterlimit","cx","cy","r","stroke-linecap","points","Cross","x1","y1","x2","y2","Quiz","setQuestions","questionIndex","setQuestionIndex","answeredQuestions","setAnsweredQuestions","ticked","setTicked","crossed","setCrossed","useEffect","then","result","content","length","filter","answered","onClick","Fragment","isTicked","isCrossed","lg","src","answerId","correctAnswer","find","questionId","nextQuestion","HomePage","sm","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa57e51e.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport Button from \"react-bootstrap/Button\";\n\nexport const HeadingContainer = styled.div`\n    width: 100%;\n    padding: 80px 10px 60px 10px;\n    text-align: center;\n`;\n\nexport const Header = styled.h1`\n    font-size: calc(16px + 4vmin);\n    font-weight: 600;\n    color: #444;\n    padding-bottom: 10px;\n`;\n\nexport const SubHeading = styled.div`\n    font-size: calc(10px + 2vmin);\n    font-weight: 500;\n    color: #999;\n`;\n\nexport const FormContainer = styled.div`\n    padding: 50px 10px 10px 10px;\n`;\n","import styled from \"styled-components\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/esm/Col\";\n\nexport const GetStartedButton = styled(Button)`\n    min-width: 300px\n    text-align: center;\n`;\n\nexport const SignUpFormCont = styled.div`\n    text-align: left;\n`;\n\nconst getPasswordColStyles = ({ isHidden }: { isHidden: boolean }) => `\n    max-width: ${isHidden ? \"0\" : \"100%\"};\n    padding: ${isHidden ? \"0\" : \"0 15px 0 15px\"};\n    input {\n        display: ${isHidden ? \"none\" : \"inline\"};\n    }\n`;\n\nexport const PasswordCol = styled(Col)`\n    transition: all 1.5s ease;\n    ${getPasswordColStyles}\n`;\n","import Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport { useState } from \"react\";\n\nimport { GetStartedButton, SignUpFormCont, PasswordCol } from \"./styled\";\n\nconst SignUpForm = () => {\n    const [hidePasswordField, sethidePasswordField] = useState(true);\n    const onEmailPress = () => hidePasswordField && sethidePasswordField(false);\n\n    return (\n        <SignUpFormCont>\n            <form method=\"post\">\n                <Form.Group>\n                    <Row>\n                        <Col md={hidePasswordField ? 3 : 2} />\n                        <Col md={3}>\n                            <Form.Control\n                                type=\"email\"\n                                required=\"required\"\n                                placeholder=\"Email\"\n                                size=\"md\"\n                                onKeyPress={onEmailPress}\n                            />\n                        </Col>\n\n                        <PasswordCol md={3} isHidden={hidePasswordField}>\n                            <Form.Control\n                                type=\"password\"\n                                required=\"required\"\n                                placeholder=\"Password\"\n                                size=\"md\"\n                            />\n                        </PasswordCol>\n                        <Col md={3}>\n                            <GetStartedButton\n                                variant=\"primary\"\n                                size=\"md\"\n                                type=\"submit\"\n                            >\n                                Signup with Email!\n                            </GetStartedButton>\n                        </Col>\n                    </Row>\n                </Form.Group>\n            </form>\n        </SignUpFormCont>\n    );\n};\n\nexport default SignUpForm;\n","import Container from \"react-bootstrap/Container\";\nimport styled from \"styled-components\";\n\nexport const QuizContainer = styled(Container)`\n    background: rgb(255, 255, 255);\n    border: 1px solid rgb(213, 220, 230);\n    border-radius: 6px;\n    box-shadow: rgb(34 50 65 / 10%) 0px 6px 20px 0px;\n    text-align: center;\n    align-items: center;\n    min-height: 300px;\n    padding: 40px;\n    padding-bottom: 80px;\n`;\n\nexport const OptionImage = styled.img`\n    width: 250px;\n    padding: 10px;\n    margin-bottom: 10px;\n    cursor: pointer;\n    :hover {\n        background-color: #ffee00;\n        opacity: 0.5;\n    }\n    opacity: ${(props: { isTransparent: boolean }) =>\n        props.isTransparent ? \"0.2\" : \"1\"};\n`;\n\nexport const QuestionText = styled.div`\n    padding: 10px 10px 40px 10px;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    font-weight: 500;\n    color: #666;\n    width: 100%;\n    text-align: center;\n`;\n\nexport const Results = styled.div`\n    padding-top: 30px;\n`;\n\nexport const ResultItem = styled.div`\n    padding: 20px;\n`;\n","import { Question } from \"./api\";\n\nexport const randomizeQuestions = (questions: Question[]): Question[] =>\n    questions\n        .map((question) => ({\n            ...question,\n            answers: question.answers.sort(() => Math.random() - 0.5),\n        }))\n        .sort(() => Math.random() - 0.5);\n","import { randomizeQuestions } from \"./utils\";\n\nconst sleep = (t: number) => new Promise((s) => setTimeout(s, t));\n\nexport interface Answer {\n    id: number;\n    answer: string;\n    img: string;\n    isCorrect: boolean;\n}\n\nexport interface Question {\n    id: number;\n    question: string;\n    answers: Answer[];\n}\n\nexport const getQuestions = async (): Promise<Question[]> => {\n    // TODO: Fetch questions from real api\n    // mocking api with sleep\n    await sleep(2000);\n    const questions = [\n        {\n            id: 1,\n            question:\n                \"Which of the following is more likely to be the result of DBScan (density-based) clustering algorithm?\",\n            answers: [\n                {\n                    id: 1,\n                    answer: \"\",\n                    img: \"/static/img/quiz_images/dbscan.png\",\n                    isCorrect: true,\n                },\n                {\n                    id: 2,\n                    answer: \"\",\n                    img: \"/static/img/quiz_images/k_means.png\",\n                    isCorrect: false,\n                },\n            ],\n        },\n        {\n            id: 2,\n            question: \"Which of the following dataset is linear?\",\n            answers: [\n                {\n                    id: 1,\n                    answer: \"\",\n                    img: \"/static/img/quiz_images/linear_data.png\",\n                    isCorrect: true,\n                },\n                {\n                    id: 2,\n                    answer: \"\",\n                    img: \"/static/img/quiz_images/non_linear_data.png\",\n                    isCorrect: false,\n                },\n            ],\n        },\n        {\n            id: 3,\n            question:\n                \"Which of the figure demonstrate the model with 'High Bias'.?\",\n            answers: [\n                {\n                    id: 1,\n                    answer: \"\",\n                    img: \"/static/img/quiz_images/high_bias.png\",\n                    isCorrect: true,\n                },\n                {\n                    id: 2,\n                    answer: \"\",\n                    img: \"/static/img/quiz_images/low_bias.png\",\n                    isCorrect: false,\n                },\n            ],\n        },\n    ];\n    return randomizeQuestions(questions);\n};\n","import styled, { keyframes } from \"styled-components\";\n\nconst rotate360 = keyframes`\nfrom {\n  transform: rotate(0deg);\n}\nto {\n  transform: rotate(360deg);\n}\n`;\n\nconst Spinner = styled.div`\n    animation: ${rotate360} 1s linear infinite;\n    transform: translateZ(0);\n    border-top: 2px solid grey;\n    border-right: 2px solid grey;\n    border-bottom: 2px solid grey;\n    border-left: 4px solid black;\n    background: transparent;\n    width: 24px;\n    height: 24px;\n    border-radius: 50%;\n`;\n\nexport default Spinner;\n","import styled from \"styled-components\";\n\nexport const StyledSVG = styled.svg`\n    max-width: 150px;\n    position: absolute;\n    top: 20%;\n    left: 34%;\n\n    .path {\n        stroke-dasharray: 1000;\n        stroke-dashoffset: 0;\n    }\n\n    .path.circle {\n        -webkit-animation: dash 0.9s ease-in-out;\n        animation: dash 0.9s ease-in-out;\n    }\n\n    .path.line {\n        stroke-dashoffset: 1000;\n        -webkit-animation: dash 0.9s 0.35s ease-in-out forwards;\n        animation: dash 0.9s 0.35s ease-in-out forwards;\n    }\n\n    .path.check {\n        stroke-dashoffset: -100;\n        -webkit-animation: dash-check 0.9s 0.35s ease-in-out forwards;\n        animation: dash-check 0.9s 0.35s ease-in-out forwards;\n    }\n\n    @-webkit-keyframes dash {\n        0% {\n            stroke-dashoffset: 1000;\n        }\n        100% {\n            stroke-dashoffset: 0;\n        }\n    }\n\n    @keyframes dash {\n        0% {\n            stroke-dashoffset: 1000;\n        }\n        100% {\n            stroke-dashoffset: 0;\n        }\n    }\n\n    @-webkit-keyframes dash-check {\n        0% {\n            stroke-dashoffset: -100;\n        }\n        100% {\n            stroke-dashoffset: 900;\n        }\n    }\n\n    @keyframes dash-check {\n        0% {\n            stroke-dashoffset: -100;\n        }\n        100% {\n            stroke-dashoffset: 900;\n        }\n    }\n`;\n","import { StyledSVG } from \"./styled\";\n\nconst Tick = () => (\n    <StyledSVG\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 130.2 130.2\"\n    >\n        <circle\n            className=\"path circle\"\n            fill=\"none\"\n            stroke=\"#73AF55\"\n            stroke-width=\"6\"\n            stroke-miterlimit=\"10\"\n            cx=\"65.1\"\n            cy=\"65.1\"\n            r=\"62.1\"\n        />\n        <polyline\n            className=\"path check\"\n            fill=\"none\"\n            stroke=\"#73AF55\"\n            stroke-width=\"6\"\n            stroke-linecap=\"round\"\n            stroke-miterlimit=\"10\"\n            points=\"100.2,40.2 51.5,88.8 29.8,67.5 \"\n        />\n    </StyledSVG>\n);\n\nexport default Tick;\n","import { StyledSVG } from \"./styled\";\n\nconst Cross = () => (\n    <StyledSVG\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 130.2 130.2\"\n    >\n        <circle\n            className=\"path circle\"\n            fill=\"none\"\n            stroke=\"#D06079\"\n            stroke-width=\"6\"\n            stroke-miterlimit=\"10\"\n            cx=\"65.1\"\n            cy=\"65.1\"\n            r=\"62.1\"\n        />\n        <line\n            className=\"path line\"\n            fill=\"none\"\n            stroke=\"#D06079\"\n            stroke-width=\"6\"\n            stroke-linecap=\"round\"\n            stroke-miterlimit=\"10\"\n            x1=\"34.4\"\n            y1=\"37.9\"\n            x2=\"95.8\"\n            y2=\"92.3\"\n        />\n        <line\n            className=\"path line\"\n            fill=\"none\"\n            stroke=\"#D06079\"\n            stroke-width=\"6\"\n            stroke-linecap=\"round\"\n            stroke-miterlimit=\"10\"\n            x1=\"95.8\"\n            y1=\"38\"\n            x2=\"34.4\"\n            y2=\"92.2\"\n        />\n    </StyledSVG>\n);\n\nexport default Cross;\n","import React, { useState, useEffect } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\n\nimport {\n    OptionImage,\n    QuestionText,\n    QuizContainer,\n    ResultItem,\n    Results,\n} from \"./styled\";\nimport { getQuestions, Question } from \"./api\";\nimport Spinner from \"components/common/spinner\";\nimport Tick from \"./images/tick\";\nimport Cross from \"./images/cross\";\nimport { randomizeQuestions } from \"./utils\";\nimport SignupForm from \"components/signupform\";\n\ninterface Answered {\n    questionId: number;\n    answerId: number;\n    isCorrect: boolean;\n}\n\nconst Quiz = () => {\n    const [questions, setQuestions] = useState<Question[]>([]);\n    const [questionIndex, setQuestionIndex] = useState<number>(0);\n    const [answeredQuestions, setAnsweredQuestions] = useState<Answered[]>([]);\n    const [ticked, setTicked] = useState<number | null>(null);\n    const [crossed, setCrossed] = useState<number | null>(null);\n\n    const question = questions[questionIndex];\n\n    useEffect(() => {\n        getQuestions().then((result) => setQuestions(result));\n    }, []);\n\n    const nextQuestion = (answerId: number) => {\n        if (!question || ticked !== null || crossed !== null) return;\n        const correctAnswer = question.answers.find(\n            (answer) => answer.isCorrect\n        );\n        const isCorrect = correctAnswer ? correctAnswer.id === answerId : false;\n        const answered = {\n            questionId: question.id,\n            answerId,\n            isCorrect,\n        };\n        setAnsweredQuestions([\n            answered,\n            ...answeredQuestions.filter(\n                (answer) => answer.questionId !== question.id\n            ),\n        ]);\n        setTimeout(() => {\n            setQuestionIndex(questionIndex + 1);\n            setTicked(null);\n            setCrossed(null);\n        }, 2000);\n        isCorrect ? setTicked(answerId) : setCrossed(answerId);\n    };\n\n    const resetQuiz = () => {\n        setQuestions(randomizeQuestions(questions));\n        setQuestionIndex(0);\n        setAnsweredQuestions([]);\n    };\n\n    let content;\n\n    if (questions.length > 0 && questionIndex === questions.length) {\n        content = (\n            <Results>\n                <ResultItem>\n                    Total correct:{\" \"}\n                    {\n                        answeredQuestions.filter(\n                            (answered) => answered.isCorrect\n                        ).length\n                    }\n                </ResultItem>\n                <ResultItem>\n                    <SignupForm />\n                </ResultItem>\n                <ResultItem>\n                    <Button onClick={resetQuiz} variant=\"link\">\n                        Try again\n                    </Button>\n                </ResultItem>\n            </Results>\n        );\n    } else if (!question) {\n        content = (\n            <Row>\n                <Spinner />\n            </Row>\n        );\n    } else {\n        content = (\n            <React.Fragment>\n                <Row>\n                    <QuestionText>{question.question}</QuestionText>\n                </Row>\n                <Row>\n                    {question.answers.map((answer) => {\n                        const isTicked = answer.id === ticked;\n                        const isCrossed = answer.id === crossed;\n                        return (\n                            <Col lg=\"6\" key={`${answer.id}`}>\n                                <OptionImage\n                                    isTransparent={isTicked || isCrossed}\n                                    src={answer.img}\n                                    onClick={() => nextQuestion(answer.id)}\n                                />\n                                {isTicked && <Tick />}\n                                {isCrossed && <Cross />}\n                            </Col>\n                        );\n                    })}\n                </Row>\n            </React.Fragment>\n        );\n    }\n    return <QuizContainer>{content}</QuizContainer>;\n};\n\nexport default Quiz;\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport { Header, HeadingContainer, SubHeading, FormContainer } from \"./styled\";\nimport SignUpForm from \"components/signupform\";\nimport Quiz from \"components/quiz\";\n\nconst HomePage = () => (\n    <Container>\n        <Row>\n            <HeadingContainer>\n                <Header>Be confident in Machine Learning.</Header>\n                <SubHeading>\n                    Understand the key concepts of Machine Learning with 100's\n                    of quizzes.\n                </SubHeading>\n                <FormContainer>\n                    <SignUpForm />\n                </FormContainer>\n            </HeadingContainer>\n        </Row>\n        <Row>\n            <Col sm={12}>\n                <Quiz />\n            </Col>\n        </Row>\n    </Container>\n);\n\nexport default HomePage;\n","import React from \"react\";\n\nimport HomePage from \"components/homepage\";\n\nconst App = () => <HomePage />;\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"custom.scss\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}