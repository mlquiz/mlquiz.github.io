{"version":3,"sources":["containers/Dashboard/dashboardSlice.ts","containers/Auth/api.ts","containers/Auth/authSlice.ts","utils/formUtils.ts","components/Button/styled.ts","components/Button/index.tsx","containers/Auth/SignupForm/styled.ts","containers/Auth/SignupForm/index.tsx","containers/Auth/LoginModal/index.tsx","containers/Dashboard/styled.ts","responsive.ts","containers/Dashboard/index.tsx","containers/Quiz/utils.ts","containers/Quiz/api.ts","containers/Quiz/images/styled.ts","containers/Quiz/images/cross.tsx","containers/Quiz/images/tick.tsx","containers/Quiz/Result/styled.ts","containers/Quiz/Result/index.tsx","containers/Quiz/styled.ts","containers/Quiz/index.tsx","containers/HomePage/styled.ts","containers/HomePage/index.tsx","containers/Navbar/index.tsx","containers/QuizPage/index.tsx","containers/Routes/ProtectedRoute.jsx","containers/Routes/index.tsx","App.tsx","app/store.ts","reportWebVitals.ts","index.tsx"],"names":["dashboardSlice","createSlice","name","initialState","topics","reducers","setTopics","state","action","payload","actions","selectTopics","dashboard","signUpAPI","email","password","isSignUp","a","url","axios","post","response","localStorage","setItem","data","auth_token","defaults","headers","Authorization","toString","console","error","stack","alert","bootstrapAPI","token","get","user","undefined","isLoginModalShown","isFetchingBootstrap","authSlice","setUser","removeUser","showLoginModal","hideLoginModal","setIsFetchingBootstrap","selectUser","auth","selectShouldShowLoginModal","selectIsFetchingBootstrap","logOut","dispatch","clear","logOutAPI","transformServerErrors","errors","setError","Object","keys","forEach","key","type","message","join","SpinnerCont","styled","div","StyledBootstrapButton","Button","isLoading","children","disabled","remainingProps","Spinner","size","animation","style","margin","GetStartedButton","SignUpFormCont","props","isVertical","getFormColStyles","isHidden","PasswordCol","Col","FormCol","SignUpForm","useState","hidePasswordField","sethidePasswordField","history","useHistory","useDispatch","useForm","register","handleSubmit","isSubmitting","formState","onSubmit","push","colSize","method","Form","Group","Boolean","non_field_errors","Row","textAlign","className","ref","md","Control","placeholder","onChange","e","required","pattern","value","isInvalid","minLength","variant","block","LoginModal","useLogin","isLogin","setIsLogin","shouldShow","useSelector","buttonTextFirst","buttonTextSecond","Modal","show","onHide","Header","closeButton","closeLabel","Body","minHeight","onClick","paddingLeft","color","DashboardCardColumns","CardColumns","locked","DashboardCard","Card","TopicTitle","h3","Dashboard","Container","map","topic","subtopics","subtopic","to","slug","marginTop","fontSize","total","correct","wrong","randomizeQuestions","questions","question","answers","has_ans_shuffle","answer_list","sort","Math","random","homeQuestions","id","content","image","is_correct","getQuestions","topicSlug","isFromResultPage","should_force_new","params","submitQuiz","quizSittingId","correctQuestion","patch","correct_questions","StyledSVG","svg","isReview","Cross","version","xmlns","viewBox","fill","stroke","strokeWidth","strokeMiterlimit","cx","cy","r","strokeLinecap","x1","y1","x2","y2","Tick","points","ResultsCont","isPage","ResultItem","ReviewButton","Result","resetQuiz","totalCorrect","onReview","onNewQuiz","SignupForm","AnswerCol","OptionCont","forceHighlight","OptionImage","img","isTransparent","QuestionImage","QuestionText","StyledProgressBar","ProgressBar","QuestionRow","NextButton","Quiz","setQuestions","sittingId","setSittingid","questionIndex","setQuestionIndex","answeredQuestions","setAnsweredQuestions","ticked","setTicked","crossed","setCrossed","setIsReview","answeredQuestion","find","questionId","useEffect","then","result","nextQuestion","answerId","correctAnswer","answer","isCorrect","answered","correctAnswerId","filter","setTimeout","newQuestionIndex","length","correctQuestionIds","progress","Fragment","now","label","src","isTicked","isCrossed","colMd","floor","HeadingContainer","h1","SubHeading","FormContainer","QuizContainer","HomePage","isFetching","sm","NavbarComponent","Navbar","bg","Brand","as","Link","Nav","NavDropdown","title","Item","Text","paddingRight","width","QuizPage","match","React","quizKey","setQuizKey","setIsFromResultPage","ProtectedRoute","Component","component","rest","isFetchingUser","render","pathname","from","location","Routes","basename","exact","path","App","getItem","store","configureStore","reducer","authReducer","dashboardReducer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","baseURL","process","datadogLogs","init","clientToken","site","forwardErrorsToLogs","sampleRate","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec4477a1.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"app/store\";\n\ninterface SubTopic {\n    name: string;\n    slug: string;\n    total: number;\n    correct: number;\n    wrong: number;\n}\n\nexport interface Topic {\n    name: string;\n    subtopics: SubTopic[];\n}\n\ninterface AuthState {\n    topics: Topic[];\n}\n\nconst initialState: AuthState = {\n    topics: [],\n};\n\nexport const dashboardSlice = createSlice({\n    name: \"dashboard\",\n    initialState,\n    reducers: {\n        setTopics: (state, action: PayloadAction<Topic[]>) => {\n            state.topics = action.payload;\n        },\n    },\n});\n\nexport const { setTopics } = dashboardSlice.actions;\nexport const selectTopics = (state: RootState) => state.dashboard.topics;\n\nexport default dashboardSlice.reducer;\n","import axios from \"axios\";\nimport { Topic } from \"containers/Dashboard/dashboardSlice\";\nimport { User } from \"./authSlice\";\n\ntype signUpResponseData = {\n    user: User;\n    auth_token: string;\n    topics: Topic[];\n};\ntype signUpResponse = {\n    data: signUpResponseData;\n};\n\nexport const signUpAPI = async (\n    email: string,\n    password: string,\n    isSignUp: boolean\n): Promise<signUpResponseData | undefined> => {\n    const url = isSignUp ? \"/auth/users/\" : \"/auth/token/login/\";\n    try {\n        const response: signUpResponse = await axios.post(url, {\n            email,\n            password,\n        });\n        localStorage.setItem(\"token\", response.data.auth_token);\n        axios.defaults.headers = {\n            Authorization: {\n                toString() {\n                    return `Token ${response.data.auth_token}`;\n                },\n            },\n        };\n        return response.data;\n    } catch (error) {\n        if (error.response?.data) throw error;\n        console.error(error, error.stack);\n        alert(\n            \"An error occured when processing your request. Please check your connection and try again.\"\n        );\n        return;\n    }\n};\n\nexport const bootstrapAPI = async (\n    token: string\n): Promise<signUpResponseData | undefined> => {\n    try {\n        const response: signUpResponse = await axios.get(\"/auth/users/me/\", {\n            headers: {\n                Authorization: `Token ${token}`,\n            },\n        });\n        axios.defaults.headers = {\n            Authorization: {\n                toString() {\n                    return `Token ${response.data.auth_token}`;\n                },\n            },\n        };\n        return response.data;\n    } catch (error) {\n        console.error(error, error.stack);\n        return;\n    }\n};\n\nexport const logOutAPI = () => {\n    try {\n        axios.post(\"/auth/token/logout/\");\n        localStorage.clear();\n        axios.defaults.headers = {};\n    } catch (error) {\n        console.error(error, error.stack);\n        alert(\n            \"An error occured when processing your request. Please check your connection and try again.\"\n        );\n        return;\n    }\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"app/store\";\nimport { setTopics } from \"containers/Dashboard/dashboardSlice\";\nimport { bootstrapAPI, logOutAPI } from \"./api\";\n\nexport interface User {\n    username: string;\n    email: string;\n    id?: number;\n}\n\ninterface AuthState {\n    user?: User;\n    isLoginModalShown: boolean;\n    isFetchingBootstrap?: boolean;\n}\n\nconst initialState: AuthState = {\n    user: undefined,\n    isLoginModalShown: false,\n    isFetchingBootstrap: undefined,\n};\n\nexport const authSlice = createSlice({\n    name: \"auth\",\n    initialState,\n    reducers: {\n        setUser: (state, action: PayloadAction<User>) => {\n            state.user = action.payload;\n        },\n        removeUser: (state) => {\n            state.user = undefined;\n        },\n        showLoginModal: (state) => {\n            state.isLoginModalShown = true;\n        },\n        hideLoginModal: (state) => {\n            state.isLoginModalShown = false;\n        },\n        setIsFetchingBootstrap: (state, action: PayloadAction<boolean>) => {\n            state.isFetchingBootstrap = action.payload;\n        },\n    },\n});\n\nexport const {\n    setUser,\n    removeUser,\n    showLoginModal,\n    hideLoginModal,\n    setIsFetchingBootstrap,\n} = authSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.auth.value)`\nexport const selectUser = (state: RootState) => state.auth.user;\nexport const selectShouldShowLoginModal = (state: RootState) =>\n    state.auth.isLoginModalShown && !state.auth.user;\nexport const selectIsFetchingBootstrap = (state: RootState) =>\n    state.auth.isFetchingBootstrap;\n\nexport const getBootstrapData = (): AppThunk => async (dispatch) => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) return;\n    dispatch(setIsFetchingBootstrap(true));\n    const data = await bootstrapAPI(token);\n    if (data) {\n        dispatch(setUser(data.user));\n        dispatch(setTopics(data.topics));\n    }\n    dispatch(setIsFetchingBootstrap(false));\n};\n\nexport const logOut = (): AppThunk => (dispatch) => {\n    logOutAPI();\n    dispatch(removeUser());\n};\nexport default authSlice.reducer;\n","export const transformServerErrors = <T>(\n    errors: { [P in keyof T]?: string[] },\n    setError: (\n        fieldName: string,\n        error: { type: string; message: string }\n    ) => void\n) =>\n    Object.keys(errors).forEach((key) => {\n        setError(key, {\n            type: \"server\",\n            message: errors[key as keyof T]!.join(\". \"),\n        });\n    });\n","import Button from \"react-bootstrap/Button\";\nimport styled from \"styled-components\";\n\nexport const SpinnerCont = styled.div`\n    padding: 0 8px 0 5px;\n`;\n\nexport const StyledBootstrapButton = styled(Button)`\n    display: flex;\n`;\n","import React from \"react\";\nimport { ButtonProps } from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { SpinnerCont, StyledBootstrapButton } from \"./styled\";\n\nconst Button = ({\n    isLoading,\n    children,\n    disabled,\n    ...remainingProps\n}: {\n    isLoading?: boolean;\n    children: any;\n    disabled?: boolean;\n} & ButtonProps) => (\n    <StyledBootstrapButton {...remainingProps} disabled={isLoading || disabled}>\n        {isLoading && (\n            <SpinnerCont>\n                <Spinner size=\"sm\" animation=\"border\" />\n            </SpinnerCont>\n        )}\n        <span style={{ margin: \"0 auto\" }}>{children}</span>\n    </StyledBootstrapButton>\n);\n\nexport default Button;\n","import Button from \"components/Button\";\nimport Col from \"react-bootstrap/esm/Col\";\nimport styled from \"styled-components\";\n\nexport const GetStartedButton = styled(Button)`\t\n    min-width: 300px\t\n    text-align: center;\t\n`;\n\nexport const SignUpFormCont = styled.div`\n    text-align: left;\n    ${(props: { isVertical: boolean }) => props.isVertical && \"width: 100%;\"}\n`;\n\nconst getPasswordColStyles = ({\n    isVertical,\n    isHidden,\n}: {\n    isHidden: boolean;\n    isVertical: boolean;\n}) => `\t\n    max-width: ${isHidden ? \"0\" : \"100%\"};\t\n    padding: ${isHidden ? \"0\" : \"0 15px 0 15px\"};\t\n    input {\t\n        display: ${isHidden ? \"none\" : \"inline\"};\t\n    }\t\n`;\n\nconst getFormColStyles = ({\n    isVertical,\n    isHidden = false,\n}: {\n    isVertical: boolean;\n    isHidden?: boolean;\n}) => `\t\n    margin-bottom: 20px;\n`;\n\nexport const PasswordCol = styled(Col)`\n    transition: all 1.5s ease;\n    ${getPasswordColStyles}\n    ${getFormColStyles}\n`;\n\nexport const FormCol = styled(Col)`\n    text-align: center;\n    ${getFormColStyles}\n`;\n","import { setUser } from \"containers/Auth/authSlice\";\nimport { setTopics } from \"containers/Dashboard/dashboardSlice\";\nimport { useState } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { transformServerErrors } from \"utils/formUtils\";\nimport { signUpAPI } from \"../api\";\nimport {\n    FormCol,\n    GetStartedButton,\n    PasswordCol,\n    SignUpFormCont,\n} from \"./styled\";\n\ntype Inputs = {\n    email: string;\n    password: string;\n};\n\nconst SignUpForm = ({\n    isSignUp,\n    isVertical,\n}: {\n    isSignUp: boolean;\n    isVertical: boolean;\n}) => {\n    const [hidePasswordField, sethidePasswordField] = useState(!isVertical);\n    const onEmailPress = (e: React.ChangeEvent<HTMLInputElement>) => {\n        hidePasswordField && sethidePasswordField(false);\n    };\n\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const {\n        register,\n        handleSubmit,\n        errors,\n        setError,\n        formState: { isSubmitting },\n    } = useForm();\n\n    const onSubmit = async (data: Inputs) => {\n        const { email, password } = data;\n        try {\n            const data = await signUpAPI(email, password, isSignUp);\n            if (!data) return;\n            dispatch(setUser(data.user));\n            dispatch(setTopics(data.topics));\n\n            history.push(\"/dashboard\");\n        } catch (error) {\n            transformServerErrors(error.response.data, setError);\n        }\n    };\n    const colSize = isVertical ? 12 : 3;\n    return (\n        <SignUpFormCont isVertical={isVertical}>\n            <form method=\"get\" onSubmit={handleSubmit(onSubmit)}>\n                <Form.Group>\n                    {Boolean(errors.non_field_errors) && (\n                        <Row style={{ textAlign: \"center\" }}>\n                            <Col>\n                                <div className=\"text-danger\">\n                                    {errors.non_field_errors.message}\n                                </div>\n                            </Col>\n                        </Row>\n                    )}\n                    <input\n                        name={\"non_field_errors\"}\n                        type={\"hidden\"}\n                        ref={register}\n                    />\n\n                    <Row>\n                        {!isVertical && <Col md={hidePasswordField ? 3 : 2} />}\n                        <FormCol md={colSize}>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Email\"\n                                name=\"email\"\n                                size=\"lg\"\n                                onChange={onEmailPress}\n                                ref={register({\n                                    required: true,\n                                    pattern: {\n                                        value: /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i,\n                                        message:\n                                            \"Please enter a valid email address.\",\n                                    },\n                                })}\n                                isInvalid={errors.email}\n                            />\n                            {errors.email && (\n                                <div className=\"text-danger\">\n                                    {errors.email.message}\n                                </div>\n                            )}\n                        </FormCol>\n\n                        <PasswordCol\n                            md={colSize}\n                            isHidden={hidePasswordField}\n                            isVertical={isVertical}\n                        >\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"Password\"\n                                size=\"lg\"\n                                name=\"password\"\n                                ref={register({\n                                    required: true,\n                                    minLength: {\n                                        value: 8,\n                                        message:\n                                            \"Your password must be at least 8 characters\",\n                                    },\n                                })}\n                                isInvalid={errors.password}\n                            />\n                            {!hidePasswordField && errors.password && (\n                                <div className=\"text-danger\">\n                                    {errors.password.message}\n                                </div>\n                            )}\n                        </PasswordCol>\n                        <FormCol md={colSize}>\n                            <GetStartedButton\n                                variant=\"primary\"\n                                size=\"lg\"\n                                type=\"submit\"\n                                isLoading={isSubmitting}\n                                block={isVertical ? true : false}\n                            >\n                                {isSignUp ? \"Signup with Email!\" : \"Login\"}\n                            </GetStartedButton>\n                        </FormCol>\n                    </Row>\n                </Form.Group>\n            </form>\n        </SignUpFormCont>\n    );\n};\n\nexport default SignUpForm;\n","import {\n    hideLoginModal,\n    selectShouldShowLoginModal,\n} from \"containers/Auth/authSlice\";\nimport { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport SignUpForm from \"../SignupForm\";\n\nconst LoginModal = ({ useLogin = true }: { useLogin?: boolean }) => {\n    const [isLogin, setIsLogin] = useState(useLogin);\n    const dispatch = useDispatch();\n\n    const handleClose = () => {\n        dispatch(hideLoginModal());\n    };\n    const shouldShow = useSelector(selectShouldShowLoginModal);\n\n    const buttonTextFirst = isLogin\n        ? \"Don't have an account?\"\n        : \"Already have account?\";\n    const buttonTextSecond = isLogin ? \"Sign up instead\" : \"Login Instead\";\n    return (\n        <Modal show={shouldShow} onHide={handleClose}>\n            <Modal.Header closeButton closeLabel=\"Close\" />\n            <Modal.Body style={{ minHeight: \"300px\" }} key={isLogin.toString()}>\n                <SignUpForm isSignUp={!isLogin} isVertical={true} />\n                <Button\n                    variant=\"text\"\n                    block={true}\n                    onClick={() => setIsLogin(!isLogin)}\n                >\n                    {buttonTextFirst}\n\n                    <span style={{ paddingLeft: \"5px\", color: \"#004499\" }}>\n                        {buttonTextSecond}\n                    </span>\n                </Button>\n            </Modal.Body>\n        </Modal>\n    );\n};\n\nexport default LoginModal;\n","import Card from \"react-bootstrap/Card\";\nimport CardColumns from \"react-bootstrap/CardColumns\";\nimport { md, sm, xs } from \"responsive\";\nimport styled from \"styled-components\";\n\nconst getDashboardCardColumnsStyles = ({ locked }: { locked: boolean }) => `\n    opacity: ${locked ? 0.5 : 1};\n`;\n\nexport const DashboardCardColumns = styled(CardColumns)`\n    ${getDashboardCardColumnsStyles}\n    @media (max-width: ${xs}px) {\n        column-count: 1;\n    }\n    @media (min-width: ${sm}px) {\n        column-count: 2;\n    }\n    @media (min-width: ${md}px) {\n        column-count: 4;\n    }\n    padding-bottom: 50px;\n`;\n\nexport const DashboardCard = styled(Card)`\n    height: 260px;\n    width: 260px !important;\n    margin: 0 auto;\n    text-align: center;\n    border: 1px solid rgb(255, 255, 255);\n    box-shadow: rgb(34 50 65 / 10%) 7px 8px 16px -6px;\n    cursor: pointer;\n    .card-body {\n        position: relative;\n        top: 50%;\n        transform: translateY(-50%);\n        font-size: 18px;\n        font-weight: 16;\n        color: #004488;\n        display: flex;\n        justify-content: center;\n        align-content: center;\n        flex-direction: column;\n    }\n    :hover {\n        background-color: #ffffef;\n    }\n`;\n\nexport const TopicTitle = styled.h3`\n    padding: 20px 0 20px 0;\n    font-weight: 500;\n    color: #444;\n`;\n","export const xs = 768;\nexport const sm = 768;\nexport const md = 992;\nexport const lg = 1200;\n","import Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { selectTopics, Topic } from \"./dashboardSlice\";\nimport { DashboardCard, DashboardCardColumns, TopicTitle } from \"./styled\";\n\nconst Dashboard = () => {\n    const topics: Topic[] = useSelector(selectTopics);\n    return (\n        <Container>\n            {topics.map((topic) => (\n                <div key={topic.name}>\n                    <TopicTitle>{topic.name}</TopicTitle>\n                    <DashboardCardColumns>\n                        {topic.subtopics.map((subtopic) => (\n                            <Link\n                                to={`/quiz/${subtopic.slug}`}\n                                key={subtopic.slug}\n                            >\n                                <DashboardCard>\n                                    <Card.Body>\n                                        <div>{subtopic.name}</div>\n                                        <div\n                                            style={{\n                                                marginTop: \"30px\",\n                                                fontSize: \"11px\",\n                                            }}\n                                        >\n                                            <div>\n                                                Total Questions:{\" \"}\n                                                {subtopic.total}\n                                            </div>\n                                            <div>\n                                                Correct Answers:{\" \"}\n                                                {subtopic.correct}\n                                            </div>\n                                            <div>\n                                                Wrong Answers: {subtopic.wrong}\n                                            </div>\n                                        </div>\n                                    </Card.Body>\n                                </DashboardCard>\n                            </Link>\n                        ))}\n                    </DashboardCardColumns>\n                </div>\n            ))}\n        </Container>\n    );\n};\n\nexport default Dashboard;\n","import { Question } from \"./api\";\n\nexport const randomizeQuestions = (questions: Question[]): Question[] =>\n    questions.map((question) => ({\n        ...question,\n        answers: question.has_ans_shuffle\n            ? question.answer_list.sort(() => Math.random() - 0.5)\n            : question.answer_list,\n    }));\n","import axios from \"axios\";\nimport { Topic } from \"containers/Dashboard/dashboardSlice\";\nimport { randomizeQuestions } from \"./utils\";\n\nexport interface Answer {\n    id: number;\n    content: string;\n    image?: string;\n    is_correct: boolean;\n}\n\nexport interface Question {\n    id: number;\n    content: string;\n    answer_list: Answer[];\n    image?: string;\n    has_ans_shuffle?: boolean;\n}\n\nconst homeQuestions = [\n    {\n        id: 1,\n        content:\n            \"Which of the following is more likely to be the result of DBScan (density-based) clustering algorithm?\",\n        answer_list: [\n            {\n                id: 1,\n                content: \"\",\n                image: \"/static/img/quiz_images/dbscan.png\",\n                is_correct: true,\n            },\n            {\n                id: 2,\n                content: \"\",\n                image: \"/static/img/quiz_images/k_means.png\",\n                is_correct: false,\n            },\n        ],\n    },\n    {\n        id: 2,\n        content: \"Which of the following dataset is linear?\",\n        answer_list: [\n            {\n                id: 1,\n                content: \"\",\n                image: \"/static/img/quiz_images/linear_data.png\",\n                is_correct: true,\n            },\n            {\n                id: 2,\n                content: \"\",\n                image: \"/static/img/quiz_images/non_linear_data.png\",\n                is_correct: false,\n            },\n        ],\n    },\n    {\n        id: 3,\n        content: \"Which of the figure demonstrate the model with 'High Bias'.?\",\n        answer_list: [\n            {\n                id: 1,\n                content: \"\",\n                image: \"/static/img/quiz_images/high_bias.png\",\n                is_correct: true,\n            },\n            {\n                id: 2,\n                content: \"\",\n                image: \"/static/img/quiz_images/low_bias.png\",\n                is_correct: false,\n            },\n        ],\n    },\n];\n\nexport type QuestionResponseData = {\n    id?: number;\n    questions: Question[];\n};\n\ninterface QuestionResponse {\n    data: QuestionResponseData;\n}\n\nexport const getQuestions = async (\n    topicSlug?: string,\n    isFromResultPage: boolean = false\n): Promise<QuestionResponseData> => {\n    let data: QuestionResponseData;\n    if (!topicSlug) {\n        data = {\n            questions: homeQuestions,\n            id: undefined,\n        };\n    } else {\n        const should_force_new = isFromResultPage ? 1 : 0;\n        try {\n            const response: QuestionResponse = await axios.get(\n                `/api/${topicSlug}/quizzes/`,\n                { params: { should_force_new } }\n            );\n            data = response.data;\n        } catch (error) {\n            console.error(error, error.stack);\n            alert(\n                \"Some errors occured. Please check your internet connection.\"\n            );\n            return { id: undefined, questions: [] };\n        }\n    }\n    return {\n        id: data.id,\n        questions: randomizeQuestions(data.questions),\n    };\n};\n\nexport const submitQuiz = async (\n    quizSittingId: number,\n    correctQuestion: number[]\n): Promise<Topic[]> => {\n    try {\n        const response: { data: { topics: Topic[] } } = await axios.patch(\n            `/api/quizzes/${quizSittingId}/`,\n            {\n                correct_questions: correctQuestion,\n            }\n        );\n        return response.data.topics;\n    } catch (error) {\n        console.error(error, error.stack);\n        return [];\n    }\n};\n","import styled from \"styled-components\";\n\nconst getSVGStyles = ({ isReview = true }: { isReview?: boolean }) => {\n    if (!isReview) {\n        return `\n            max-width: 150px;\n        `;\n    } else {\n        return `\n            max-width: 40px;\n            margin: 200px auto;\n            transform: translate(80px, -70px);\n        `;\n    }\n};\n\nexport const StyledSVG = styled.svg`\n    position: absolute;\n    margin-left: auto;\n    margin-right: auto;\n    left: 0;\n    right: 0;\n    text-align: center;\n    ${getSVGStyles}\n    .path {\n        stroke-dasharray: 1000;\n        stroke-dashoffset: 0;\n    }\n\n    .path.circle {\n        -webkit-animation: dash 0.9s ease-in-out;\n        animation: dash 0.9s ease-in-out;\n    }\n\n    .path.line {\n        stroke-dashoffset: 1000;\n        -webkit-animation: dash 0.9s 0.35s ease-in-out forwards;\n        animation: dash 0.9s 0.35s ease-in-out forwards;\n    }\n\n    .path.check {\n        stroke-dashoffset: -100;\n        -webkit-animation: dash-check 0.9s 0.35s ease-in-out forwards;\n        animation: dash-check 0.9s 0.35s ease-in-out forwards;\n    }\n\n    @-webkit-keyframes dash {\n        0% {\n            stroke-dashoffset: 1000;\n        }\n        100% {\n            stroke-dashoffset: 0;\n        }\n    }\n\n    @keyframes dash {\n        0% {\n            stroke-dashoffset: 1000;\n        }\n        100% {\n            stroke-dashoffset: 0;\n        }\n    }\n\n    @-webkit-keyframes dash-check {\n        0% {\n            stroke-dashoffset: -100;\n        }\n        100% {\n            stroke-dashoffset: 900;\n        }\n    }\n\n    @keyframes dash-check {\n        0% {\n            stroke-dashoffset: -100;\n        }\n        100% {\n            stroke-dashoffset: 900;\n        }\n    }\n`;\n","import { StyledSVG } from \"./styled\";\n\nconst Cross = ({ isReview }: { isReview: boolean }) => (\n    <StyledSVG\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 130.2 130.2\"\n        isReview={isReview}\n    >\n        <circle\n            className=\"path circle\"\n            fill=\"none\"\n            stroke=\"#D06079\"\n            strokeWidth=\"6\"\n            strokeMiterlimit=\"10\"\n            cx=\"65.1\"\n            cy=\"65.1\"\n            r=\"62.1\"\n        />\n        <line\n            className=\"path line\"\n            fill=\"none\"\n            stroke=\"#D06079\"\n            strokeWidth=\"6\"\n            strokeLinecap=\"round\"\n            strokeMiterlimit=\"10\"\n            x1=\"34.4\"\n            y1=\"37.9\"\n            x2=\"95.8\"\n            y2=\"92.3\"\n        />\n        <line\n            className=\"path line\"\n            fill=\"none\"\n            stroke=\"#D06079\"\n            strokeWidth=\"6\"\n            strokeLinecap=\"round\"\n            strokeMiterlimit=\"10\"\n            x1=\"95.8\"\n            y1=\"38\"\n            x2=\"34.4\"\n            y2=\"92.2\"\n        />\n    </StyledSVG>\n);\n\nexport default Cross;\n","import { StyledSVG } from \"./styled\";\n\nconst Tick = ({ isReview }: { isReview: boolean }) => (\n    <StyledSVG\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 130.2 130.2\"\n        isReview={isReview}\n    >\n        <circle\n            className=\"path circle\"\n            fill=\"none\"\n            stroke=\"#73AF55\"\n            strokeWidth=\"6\"\n            strokeMiterlimit=\"10\"\n            cx=\"65.1\"\n            cy=\"65.1\"\n            r=\"62.1\"\n        />\n        <polyline\n            className=\"path check\"\n            fill=\"none\"\n            stroke=\"#73AF55\"\n            strokeWidth=\"6\"\n            strokeLinecap=\"round\"\n            strokeMiterlimit=\"10\"\n            points=\"100.2,40.2 51.5,88.8 29.8,67.5 \"\n        />\n    </StyledSVG>\n);\n\nexport default Tick;\n","import Button from \"react-bootstrap/Button\";\nimport styled from \"styled-components\";\n\nconst getResultsStyles = ({ isPage }: { isPage: boolean }) => `\n    font-size: ${isPage ? \"25px\" : \"12px\"};\n`;\n\nexport const ResultsCont = styled.div`\n    text-align: center;\n    padding-top: 30px;\n    ${getResultsStyles};\n`;\n\nexport const ResultItem = styled.div`\n    padding: 20px;\n`;\n\nexport const ReviewButton = styled(Button)`\n    font-size: 25px;\n`;\n","import SignupForm from \"containers/Auth/SignupForm\";\nimport Button from \"react-bootstrap/Button\";\nimport { useHistory } from \"react-router-dom\";\nimport { ResultItem, ResultsCont, ReviewButton } from \"./styled\";\n\nconst Result = ({\n    resetQuiz,\n    totalCorrect,\n    onReview,\n    onNewQuiz,\n    topicSlug,\n}: {\n    resetQuiz: () => void;\n    totalCorrect: Number;\n    onReview: () => void;\n    onNewQuiz: (e: React.MouseEvent<HTMLElement>) => void;\n    topicSlug?: string;\n}) => {\n    const isPage = Boolean(topicSlug);\n    const history = useHistory();\n    const onDashboard = (e: React.MouseEvent<HTMLElement>) =>\n        history.push(\"/dashboard\");\n    return (\n        <ResultsCont isPage={isPage}>\n            <ResultItem>Total correct: {totalCorrect}</ResultItem>\n            {!isPage && (\n                <ResultItem>\n                    <SignupForm isSignUp={true} isVertical={true} />\n                </ResultItem>\n            )}\n            {isPage && (\n                <>\n                    <ResultItem>\n                        <ReviewButton variant=\"link\" onClick={onReview}>\n                            Review all questions\n                        </ReviewButton>\n                    </ResultItem>\n                    <ResultItem>\n                        <ReviewButton variant=\"primary\" onClick={onNewQuiz}>\n                            New Quiz from same topic\n                        </ReviewButton>\n                    </ResultItem>\n                    <ResultItem>\n                        <ReviewButton variant=\"secondary\" onClick={onDashboard}>\n                            Back to Dashboard\n                        </ReviewButton>\n                    </ResultItem>\n                </>\n            )}\n            <ResultItem>\n                <Button onClick={resetQuiz} variant=\"link\">\n                    Try same questions again\n                </Button>\n            </ResultItem>\n        </ResultsCont>\n    );\n};\nexport default Result;\n","import Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Row from \"react-bootstrap/Row\";\nimport styled from \"styled-components\";\n\nexport const AnswerCol = styled(Col)`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst getOptionContStyles = ({\n    forceHighlight,\n    isReview,\n}: {\n    forceHighlight?: boolean;\n    isReview: boolean;\n}) => {\n    if (!isReview) {\n        return `\n            :hover {\n                background-color: #ffffef;\n                opacity: 0.5;\n            }\n            cursor: pointer;\n        `;\n    } else {\n        return `\n            ${forceHighlight ? \"background-color: #ffffef;\" : \"\"}\n        `;\n    }\n};\n\nexport const OptionCont = styled.div`\n    ${getOptionContStyles}\n    min-height: 200px;\n    display: flex;\n    width: 220px;\n    padding: 0 10px 0 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    border: 1px solid rgb(255, 255, 255);\n    box-shadow: rgb(34 50 65 / 10%) 0px 6px 20px 0px;\n    margin-bottom: 50px;\n`;\n\nexport const OptionImage = styled.img`\n    height: 200px;\n    max-width: 200px;\n    padding: 10px;\n    margin-bottom: 10px;\n    opacity: ${(props: { isTransparent: boolean }) =>\n        props.isTransparent ? \"0.2\" : \"1\"};\n`;\n\nexport const QuestionImage = styled.img`\n    max-height: 250px;\n    padding: 10px;\n    margin: 0 auto;\n    max-width: 400px;\n    margin-bottom: 40px;\n`;\n\nexport const QuestionText = styled.div`\n    padding: calc(10px + 10vmin); 10px 40px 10px;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    font-weight: 500;\n    color: #666;\n    width: 100%;\n`;\n\nexport const StyledProgressBar = styled(ProgressBar)`\n    width: 100%;\n    height: 30px;\n`;\n\nexport const QuestionRow = styled(Row)`\n    text-align: center;\n`;\n\nexport const NextButton = styled(Button)`\n    margin: 30px auto 0 auto;\n    min-width: 150px;\n    border-radius: 0;\n`;\n","import { setTopics } from \"containers/Dashboard/dashboardSlice\";\nimport React, { useEffect, useState } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { useDispatch } from \"react-redux\";\nimport { getQuestions, Question, submitQuiz } from \"./api\";\nimport Cross from \"./images/cross\";\nimport Tick from \"./images/tick\";\nimport Result from \"./Result\";\nimport {\n    AnswerCol,\n    NextButton,\n    OptionCont,\n    OptionImage,\n    QuestionImage,\n    QuestionRow,\n    QuestionText,\n    StyledProgressBar,\n} from \"./styled\";\nimport { randomizeQuestions } from \"./utils\";\n\ninterface Answered {\n    questionId: number;\n    answerId: number;\n    isCorrect: boolean;\n    correctAnswerId: number | null;\n}\n\nconst Quiz = ({\n    topicSlug = undefined,\n    onNewQuiz = () => undefined,\n    isFromResultPage = false,\n}: {\n    topicSlug?: string;\n    onNewQuiz?: (e: React.MouseEvent<HTMLElement>) => void;\n    isFromResultPage?: boolean;\n}) => {\n    const dispatch = useDispatch();\n    const [questions, setQuestions] = useState<Question[]>([]);\n    const [sittingId, setSittingid] = useState<number | undefined>(undefined);\n    const [questionIndex, setQuestionIndex] = useState<number>(0);\n    const [answeredQuestions, setAnsweredQuestions] = useState<Answered[]>([]);\n    const [ticked, setTicked] = useState<number | null>(null);\n    const [crossed, setCrossed] = useState<number | null>(null);\n    const [isReview, setIsReview] = useState<boolean>(false);\n\n    const question = questions[questionIndex];\n    const answeredQuestion = question\n        ? answeredQuestions.find(\n              (answeredQuestion) => answeredQuestion.questionId === question.id\n          )\n        : undefined;\n\n    useEffect(() => {\n        getQuestions(topicSlug, isFromResultPage).then((result) => {\n            setQuestions(result.questions);\n            setSittingid(result.id);\n        });\n    }, [topicSlug, isFromResultPage]);\n\n    const nextQuestion = (answerId?: number) => {\n        if (!question || ticked !== null || crossed !== null) return;\n        if (isReview || !answerId) {\n            return setQuestionIndex(questionIndex + 1);\n        }\n        const correctAnswer = question.answer_list.find(\n            (answer) => answer.is_correct\n        );\n        const isCorrect = correctAnswer ? correctAnswer.id === answerId : false;\n\n        const answered = {\n            questionId: question.id,\n            answerId,\n            isCorrect,\n            correctAnswerId: correctAnswer ? correctAnswer.id : null,\n        };\n        setAnsweredQuestions([\n            answered,\n            ...answeredQuestions.filter(\n                (answer) => answer.questionId !== question.id\n            ),\n        ]);\n        setTimeout(() => {\n            const newQuestionIndex = questionIndex + 1;\n            setQuestionIndex(newQuestionIndex);\n            setTicked(null);\n            setCrossed(null);\n            if (\n                questions.length > 0 &&\n                newQuestionIndex === questions.length &&\n                !isReview &&\n                topicSlug &&\n                answeredQuestions.length > 0 &&\n                sittingId\n            ) {\n                const correctQuestionIds = answeredQuestions\n                    .filter((answered) => answered.isCorrect)\n                    .map((answered) => answered.questionId);\n                submitQuiz(sittingId, correctQuestionIds).then(\n                    (topics) => topics.length > 0 && dispatch(setTopics(topics))\n                );\n            }\n        }, 2000);\n        isCorrect ? setTicked(answerId) : setCrossed(answerId);\n    };\n\n    const resetQuiz = () => {\n        setQuestions(randomizeQuestions(questions));\n        setQuestionIndex(0);\n        setAnsweredQuestions([]);\n        setIsReview(false);\n    };\n\n    const onReview = () => {\n        setIsReview(true);\n        setQuestionIndex(0);\n    };\n\n    let content;\n\n    if (questions.length > 0 && questionIndex === questions.length) {\n        content = (\n            <Result\n                onNewQuiz={onNewQuiz}\n                topicSlug={topicSlug}\n                resetQuiz={resetQuiz}\n                onReview={onReview}\n                totalCorrect={\n                    answeredQuestions.filter((answered) => answered.isCorrect)\n                        .length\n                }\n            />\n        );\n    } else if (!question) {\n        content = (\n            <QuestionRow>\n                <Spinner animation=\"border\" />\n            </QuestionRow>\n        );\n    } else {\n        const progress =\n            questions.length > 0\n                ? ((questionIndex + 1) / questions.length) * 100\n                : 0;\n        content = (\n            <React.Fragment>\n                <QuestionRow>\n                    <StyledProgressBar\n                        now={progress}\n                        label={`${questionIndex + 1} / ${questions.length}`}\n                    />\n                </QuestionRow>\n                {isReview && (\n                    <QuestionRow>\n                        <NextButton\n                            onClick={() => nextQuestion()}\n                            variant=\"secondary\"\n                            size=\"sm\"\n                        >\n                            Next\n                        </NextButton>\n                    </QuestionRow>\n                )}\n                <QuestionRow>\n                    <QuestionText>{question.content}</QuestionText>\n                    {question.image && <QuestionImage src={question.image} />}\n                </QuestionRow>\n                <QuestionRow>\n                    {question.answer_list.map((answer) => {\n                        const isTicked = !isReview\n                            ? answer.id === ticked\n                            : answeredQuestion &&\n                              answer.id === answeredQuestion.correctAnswerId;\n                        const isCrossed = !isReview\n                            ? answer.id === crossed\n                            : answeredQuestion &&\n                              answer.id === answeredQuestion.answerId &&\n                              answer.id !== answeredQuestion.correctAnswerId;\n                        const colMd =\n                            question.answer_list.length > 1\n                                ? Math.floor(12 / question.answer_list.length)\n                                : 6;\n                        return (\n                            <AnswerCol\n                                md={colMd}\n                                key={`${question.id}-${answer.id}`}\n                            >\n                                <OptionCont\n                                    onClick={() => nextQuestion(answer.id)}\n                                    forceHighlight={\n                                        answeredQuestion &&\n                                        answeredQuestion.answerId === answer.id\n                                    }\n                                    isReview={isReview}\n                                >\n                                    {answer.image && (\n                                        <OptionImage\n                                            isTransparent={Boolean(\n                                                !isReview &&\n                                                    (isTicked || isCrossed)\n                                            )}\n                                            src={answer.image}\n                                        />\n                                    )}\n                                    {answer.content && (\n                                        <div> {answer.content} </div>\n                                    )}\n\n                                    {isTicked && <Tick isReview={isReview} />}\n                                    {isCrossed && <Cross isReview={isReview} />}\n                                </OptionCont>\n                            </AnswerCol>\n                        );\n                    })}\n                </QuestionRow>\n            </React.Fragment>\n        );\n    }\n    return (\n        <Container onClick={() => (isReview ? nextQuestion() : undefined)}>\n            {content}\n        </Container>\n    );\n};\n\nexport default Quiz;\n","import styled from \"styled-components\";\n\nexport const HeadingContainer = styled.div`\n    width: 100%;\n    padding: 80px 10px 20px 10px;\n    text-align: center;\n`;\n\nexport const Header = styled.h1`\n    font-size: calc(16px + 4vmin);\n    font-weight: 600;\n    color: #444;\n    padding-bottom: 10px;\n`;\n\nexport const SubHeading = styled.div`\n    font-size: calc(10px + 2vmin);\n    font-weight: 500;\n    color: #999;\n`;\n\nexport const FormContainer = styled.div`\n    padding: 50px 10px 10px 10px;\n`;\n\nexport const QuizContainer = styled.div`\n    background: rgb(255, 255, 255);\n    border: 1px solid rgb(213, 220, 230);\n    border-radius: 6px;\n    box-shadow: rgb(34 50 65 / 10%) 0px 6px 20px 0px;\n    text-align: center;\n    align-items: center;\n    min-height: 300px;\n    padding: 40px;\n    padding-bottom: 80px;\n`;\n","import {\n    selectIsFetchingBootstrap,\n    selectUser,\n} from \"containers/Auth/authSlice\";\nimport SignUpForm from \"containers/Auth/SignupForm\";\nimport Quiz from \"containers/Quiz\";\nimport React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Spinner from \"react-bootstrap/esm/Spinner\";\nimport Row from \"react-bootstrap/Row\";\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n    FormContainer,\n    Header,\n    HeadingContainer,\n    QuizContainer,\n    SubHeading,\n} from \"./styled\";\n\nconst HomePage = () => {\n    const history = useHistory();\n    const user = useSelector(selectUser);\n    const isFetching = useSelector(selectIsFetchingBootstrap);\n    if (user) {\n        history.push(\"/dashboard\");\n    }\n\n    if (isFetching) {\n        return <Spinner animation=\"grow\" />;\n    }\n    return (\n        <Container>\n            <Row>\n                <HeadingContainer>\n                    <Header>Be confident in Machine Learning.</Header>\n                    <SubHeading>\n                        Understand the key concepts of Machine Learning with\n                        100's of quizzes.\n                    </SubHeading>\n                    <FormContainer>\n                        <SignUpForm isSignUp={true} isVertical={false} />\n                    </FormContainer>\n                </HeadingContainer>\n            </Row>\n            <Row>\n                <Col sm={12}>\n                    <QuizContainer>\n                        <Quiz />\n                    </QuizContainer>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default HomePage;\n","import { logOut, selectUser, showLoginModal } from \"containers/Auth/authSlice\";\nimport React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nconst NavbarComponent = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const onLogOut = () => {\n        dispatch(logOut());\n        history.push(\"/\");\n    };\n    const setShowLoginModal = (e: React.MouseEvent<HTMLElement>) =>\n        dispatch(showLoginModal());\n\n    const user = useSelector(selectUser);\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand as={Link} to=\"/\">\n                MLQuiz\n            </Navbar.Brand>\n\n            <Nav className=\"mr-auto\">\n                {user && (\n                    <Nav.Link as={Link} to=\"/dashboard\">\n                        Dashboard\n                    </Nav.Link>\n                )}\n            </Nav>\n\n            {user && (\n                <Nav>\n                    <NavDropdown title={user.email} id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item onClick={onLogOut}>\n                            Logout\n                        </NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n            )}\n            {!user && (\n                <Nav.Item>\n                    <Navbar.Text\n                        style={{ paddingRight: \"30px\" }}\n                        className=\"nav-text d-none d-sm-inline\"\n                    >\n                        Already a member?\n                    </Navbar.Text>\n                    <Button\n                        variant=\"outline-secondary\"\n                        size=\"sm\"\n                        onClick={setShowLoginModal}\n                        style={{ width: \"100px\" }}\n                    >\n                        Login\n                    </Button>\n                </Nav.Item>\n            )}\n        </Navbar>\n    );\n};\n\nexport default NavbarComponent;\n","import Quiz from \"containers/Quiz\";\nimport React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\ntype QuizMatchParams = { topicSlug: string };\n\nconst QuizPage = ({ match }: RouteComponentProps<QuizMatchParams>) => {\n    const [quizKey, setQuizKey] = React.useState<number>(0);\n    const [isFromResultPage, setIsFromResultPage] = React.useState<boolean>(\n        false\n    );\n    const onNewQuiz = (e: React.MouseEvent<HTMLElement>) => {\n        setIsFromResultPage(true);\n        setQuizKey(quizKey + 1);\n    };\n    const topicSlug = match.params.topicSlug;\n    return (\n        <Quiz\n            topicSlug={topicSlug}\n            key={`${topicSlug}-${quizKey}`}\n            onNewQuiz={onNewQuiz}\n            isFromResultPage={isFromResultPage}\n        />\n    );\n};\n\nexport default QuizPage;\n","import { Route, Redirect } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport {\n    selectIsFetchingBootstrap,\n    selectUser,\n} from \"containers/Auth/authSlice\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\n    const user = useSelector(selectUser);\n    const isFetchingUser = useSelector(selectIsFetchingBootstrap);\n    return (\n        <Route\n            {...rest}\n            render={(props) => {\n                if (user) {\n                    return <Component {...rest} {...props} />;\n                } else if (isFetchingUser !== false) {\n                    return <Spinner animation=\"grow\" />;\n                } else {\n                    return (\n                        <Redirect\n                            to={{\n                                pathname: \"/\",\n                                state: {\n                                    from: props.location,\n                                },\n                            }}\n                        />\n                    );\n                }\n            }}\n        />\n    );\n};\n\nexport default ProtectedRoute;\n","import LoginModal from \"containers/Auth/LoginModal\";\nimport Dashboard from \"containers/Dashboard\";\nimport HomePage from \"containers/HomePage\";\nimport Navbar from \"containers/Navbar\";\nimport QuizPage from \"containers/QuizPage\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport ProtectedRoute from \"./ProtectedRoute\";\n\nconst Routes = () => (\n    <Router basename=\"/\">\n        <Navbar />\n        <Switch>\n            <Route exact path=\"/\" component={HomePage} />\n            <ProtectedRoute exact path=\"/dashboard\" component={Dashboard} />\n            <ProtectedRoute\n                exact\n                path=\"/quiz/:topicSlug\"\n                component={QuizPage}\n            />\n        </Switch>\n        <LoginModal />\n    </Router>\n);\n\nexport default Routes;\n","import { getBootstrapData } from \"containers/Auth/authSlice\";\nimport Routes from \"containers/Routes\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nconst App = () => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(getBootstrapData());\n    }, [dispatch]);\n    return <Routes />;\n};\n\nexport default App;\n","import { Action, configureStore, ThunkAction } from \"@reduxjs/toolkit\";\nimport authReducer from \"containers/Auth/authSlice\";\nimport dashboardReducer from \"containers/Dashboard/dashboardSlice\";\n\nexport const store = configureStore({\n    reducer: {\n        auth: authReducer,\n        dashboard: dashboardReducer,\n    },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    RootState,\n    unknown,\n    Action<string>\n>;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import { datadogLogs } from \"@datadog/browser-logs\";\nimport App from \"App\";\nimport { store } from \"app/store\";\nimport axios from \"axios\";\nimport \"custom.scss\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\naxios.defaults.baseURL =\n    process.env.NODE_ENV === \"production\"\n        ? process.env.REACT_APP_BE_URL\n        : process.env.REACT_APP_DEV_API_URL;\n\nif (process.env.NODE_ENV === \"production\") {\n    datadogLogs.init({\n        clientToken: \"pub80376e3ff603ccd714273065e2fde419\",\n        site: \"datadoghq.eu\",\n        forwardErrorsToLogs: true,\n        sampleRate: 100,\n    });\n}\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}